Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'




CODE:

class Solution {
public:
    
    bool validPoint(int x,int y,int rows,int cols){
        return (x>=0 && x<rows && y>=0 && y<cols);
    }
    
    void numIslandHelper(vector<vector<char>> &grid,int rows,int cols,int currRow,int currCol
                          ,vector<vector<bool>> &visited)
    {
        visited[currRow][currCol] = true;
        
        int dx[] = {1,-1,0,0};
        int dy[] = {0,0,1,-1};
        
        for(int i=0;i<4;i++)
        {
            int newX = currRow + dx[i];
            int newY = currCol + dy[i];
            
            if(validPoint(newX,newY,rows,cols) && grid[newX][newY]=='1' && !visited[newX][newY]){
                numIslandHelper(grid,rows,cols,newX,newY,visited);
            }
        }
        
        return;
    }
    
    
    int numIslands(vector<vector<char>>& grid) {
        int rows = grid.size();
        int cols = grid[0].size();
        
        vector<vector<bool>> visited(rows,vector<bool>(cols,false));
        
        int islands = 0;
        
        for(int i=0;i<rows;i++)
        {
            for(int j=0;j<cols;j++)
            {
                if(grid[i][j]=='1' && !visited[i][j])
                {
                    numIslandHelper(grid,rows,cols,i,j,visited);
                    islands+=1;
                }
            }
        }
        return islands;
    }
};

